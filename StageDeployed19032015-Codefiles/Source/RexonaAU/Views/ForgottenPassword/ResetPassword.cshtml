@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Umbraco.Web
@using RexonaAU.Models
@using RexonaAU.Controllers
@model ResetPasswordViewModel
@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
}

<div class="hero-panel hero-1"></div>
<div class="row">
    <div class="large-10 small-12 columns large-centered">
        <div class="container-block">
            <div class="block-content inverted">
                <h1 class="contained-title centered centered-title">Reset your password</h1>         
            </div>
            <div class="block-content">
                <div class="row">
                    <div class="large-9 columns large-centered">
                        <div class="row">
                            <div class="large-12 columns">
                                @using (Html.BeginUmbracoForm<ForgottenPasswordController>("HandleResetPassword", null, new Dictionary<string, object> { { "data-abide", "data-abide" } }))
                                {
                                    @Html.AntiForgeryToken()
@* <form data-abide='ajax'>*@
                                    <input type="hidden" id="EmailAddress" name="EmailAddress" value="@Model.EmailAddress" />
                                    <div class="row">
                                       @* OLD HTML
                                         <div class="large-12 columns">
                                            <label for="Password">Choose a new password</label>
                                            <input type="password" id="Password" name="Password" pattern="(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?=.*[A-Z]).*$" required maxlength="25" />
                                            <small class="error">Passwords must be at least 8 characters with 1 capital letter and 1 number.</small>
                                        </div>*@
                                        <div class="large-12 columns">
                                            <label>Choose a new password <span data-tooltip aria-haspopup="true" href="#" class="has-tip" title="Passwords must contain a number, punctuation (e.g. (),!&#64;#$%^&*), and at least one capital letter.">?</span></label>
                                            <input style="display: none" type="text" name="fakeemailremembered" />
                                            <input style="display: none" type="password" name="fakepasswordremembered" />
                                            <input type="password" name="Password" id="Password" required data-abide-validator="passwordCheck" />
                                            <small class="error" id="passwordError"></small>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="large-12 columns">
                                            <label for="ConfirmPassword">Confirm Password</label>
                                            <input type="password" id="ConfirmPassword" name="ConfirmPassword" required data-equalto="Password" />
                                            <small class="error">Passwords must match.</small>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="large-12 columns">
                                            <button type="submit" class="button with-icon right-icon full-width">Reset and Continue <i class="fa fa-chevron-right"></i></button>
                                        </div>
                                    </div>@*
                                </form>*@
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@if (!string.IsNullOrEmpty(TempData["ResetPasswordMsg"] != null ? TempData["ResetPasswordMsg"].ToString() : string.Empty))
{
    <script type="text/javascript">
        $(document).ready(function () {
            new jBox('Notice', {
                content: '@Html.Raw(TempData["ResetPasswordMsg"].ToString())',
                color: 'green',
                theme: 'NoticeBorder'
            });
        });
    </script>
    TempData["ResetPasswordMsg"] = null;
}
@if (!string.IsNullOrEmpty(TempData["Status"] != null ? TempData["Status"].ToString() : string.Empty))
{
    <script type="text/javascript">
        $(document).ready(function () {
            new jBox('Notice', {
                content: '@Html.Raw(TempData["Status"].ToString())',
                color: 'red',
                theme: 'NoticeBorder'
            });
        });
    </script>
    TempData["Status"] = null;
}
@if (!string.IsNullOrEmpty(TempData["ErrorMessage"] != null ? TempData["ErrorMessage"].ToString() : string.Empty))
{
    <script type="text/javascript">
        $(document).ready(function () {
            new jBox('Notice', {
                content: '@Html.Raw(TempData["ErrorMessage"].ToString())',
                color: 'red',
                theme: 'NoticeBorder'
            });
        });
    </script>
    TempData["ErrorMessage"] = null;
}